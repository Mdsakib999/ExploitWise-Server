const express = require("express");
const cors = require("cors");
const asyncHandler = require("./utils");
const app = express();
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const port = process.env.PORT || 5000;
const cloudinary = require("cloudinary").v2;

require("dotenv").config();
cloudinary.config({
  cloud_name: process.env.CLOUDE_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});
console.log(process.env.CLOUDE_NAME);
// middleware

app.use(express.json());
app.use(cors());

const deleteImageUrl = async (url) => {
  let public_id = url.split("/")[7].split(".")[0];
  console.log(public_id);
  const result = await cloudinary.api.delete_resources([public_id], {
    type: "upload",
    resource_type: "image",
  });
  return { result };
};
const verifyJWT = (req, res, next) => {
  const token = req.headers.authorization;
  if (!token) {
    return res.status(401).send({ error: true, message: "unauthorized" });
  }
  jwt.verify(token, process.env.JWT_SCERET, (error, decoded) => {
    if (error) {
      return res.status(401).send({ error: true, message: "unauthorized" });
    }
    req.decoded = decoded;
    next();
  });
};

app.get("/", (req, res) => {
  res.send("Hello World!");
});

const { MongoClient, ServerApiVersion, ObjectId } = require("mongodb");
const uri = `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@cluster0.cfh7few.mongodb.net/?appName=Cluster0`;

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});
async function run() {
  try {
    const database = client.db("goldenAccount");
    const coinItemCollection = database.collection("coinitem");
    const userCollection = database.collection("user");
    const isSuperAdmin = async (req, res, next) => {
      const { email, role } = req.decoded;
      const isEmailExist = await userCollection.findOne({ email });
      if (isEmailExist.role !== role) {
        return res.status(401).send({ error: true, message: "unauthorized" });
      }
      next();
    };
    const makesuperAdmin = async () => {
      const email = "safiislam04@gmail.com";
      const password = "safi@123";
      const hashedPassword = await bcrypt.hash(
        password,
        parseInt(process.env.BCRYPT_SALTROUNDS)
      );
      if (hashedPassword) {
        const findAdmin = await userCollection.findOne({ email });
        if (!findAdmin) {
          userCollection.insertOne({
            email,
            password: hashedPassword,
            role: "superAdmin",
          });
        }
      }
    };
    app.post(
      "/adminLogin",
      asyncHandler(async (req, res) => {
        const { email, password } = req.body;
        const findUser = await userCollection.findOne({ email });
        if (!findUser) {
          res.send({ error: true, message: "Email is not valid" });
        }
        const isPasswordTrue = await bcrypt.compare(
          password,
          findUser.password
        );
        if (isPasswordTrue) {
          const token = jwt.sign(
            {
              email: findUser.email,
              role: findUser.role,
            },
            process.env.JWT_SCERET,
            { expiresIn: 60 * 60 }
          );
          res.send({ token });
        } else {
          res.send({ error: true, message: "Wrong Password" });
        }
      })
    );

    makesuperAdmin();
    app.post(
      "/item",
      verifyJWT,
      isSuperAdmin,
      asyncHandler(async (req, res) => {
        const data = req.body;
        const result = await coinItemCollection.insertOne(data);
        res.send(result);
      })
    );

    app.get(
      "/item",
      verifyJWT,
      isSuperAdmin,
      asyncHandler(async (req, res) => {
        const result = await coinItemCollection.find().toArray();
        res.send(result);
      })
    );
    app.patch(
      "/item/:id",
      verifyJWT,
      isSuperAdmin,
      asyncHandler(async (req, res) => {
        const data = req.body;
        const { id } = req.params;
        if (data?.oldImageUrl) {
          const result = await deleteImageUrl(data.oldImageUrl);
          if (result) {
            delete data.oldImageUrl;
          }
        }
        const result = await coinItemCollection.updateOne(
          { _id: new ObjectId(id) },
          {
            $set: {
              ...data,
            },
          },
          {
            upsert: true,
          }
        );
        res.send(result);
      })
    );

    app.delete(
      "/item/:id",
      verifyJWT,
      isSuperAdmin,
      asyncHandler(async (req, res) => {
        const { id } = req.params;
        console.log(id);
        const data = await coinItemCollection.findOne({
          _id: new ObjectId(id),
        });
        console.log(data);
        const deleteImage = await deleteImageUrl(data.cover_image);

        if (deleteImage) {
          const result = await coinItemCollection.deleteOne({
            _id: new ObjectId(id),
          });
          res.send(result);
        }
      })
    );

    app.get(
      "/items",
      asyncHandler(async (req, res) => {
        const { category } = req.query;
        const result = await coinItemCollection.find({ category }).toArray();
        res.send(result);
      })
    );
    app.get(
      "/searchData",
      asyncHandler(async (req, res) => {
        const { search = "" } = req.query;
        const searchQuery = search
          ? {
              $or: [
                { title: { $regex: search, $options: "i" } },
                { price: { $regex: search, $options: "i" } },
                { category: { $regex: search, $options: "i" } },
              ],
            }
          : {};
        const result = await coinItemCollection.find(searchQuery).toArray();
        const limitedResult = result.slice(0, 3);
        res.send(limitedResult);
      })
    );
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log(
      "Pinged your deployment. You successfully connected to MongoDB!"
    );
  } finally {
    // Ensures that the client will close when you finish/error
    // await client.close();
  }
}
run().catch(console.dir);

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});
