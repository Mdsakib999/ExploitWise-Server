// This is server side code
const express = require("express");
const cors = require("cors");
const asyncHandler = require("./utils");
const app = express();
const port = process.env.PORT || 5000;
const cloudinary = require("cloudinary").v2;

require("dotenv").config();
cloudinary.config({
  cloud_name: process.env.CLOUDE_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});
console.log(process.env.CLOUDE_NAME);
// middleware
// middleware

app.use(express.json());
app.use(cors());

const deleteImageUrl = async (url) => {
  let public_id = url.split("/")[7].split(".")[0];
  console.log(public_id);
  const result = await cloudinary.api.delete_resources([public_id], {
    type: "upload",
    resource_type: "image",
  });
  return { result };
};

app.get("/", (req, res) => {
  res.send("Hello World!");
});

const { MongoClient, ServerApiVersion, ObjectId } = require("mongodb");
const uri = `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@cluster0.cfh7few.mongodb.net/?appName=Cluster0`;

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});

async function run() {
  try {
    const database = client.db("goldenAccount");
    const coinItemCollection = database.collection("coinitem");
    // app.get(
    //   "/adminUser",
    //   asyncHandler(async (req, res) => {
    //     const data = req.body;
    //   })
    // );
    app.post(
      "/item",
      asyncHandler(async (req, res) => {
        const data = req.body;
        const result = await coinItemCollection.insertOne(data);
        res.send(result);
      })
    );

    app.get(
      "/item",
      asyncHandler(async (req, res) => {
        const result = await coinItemCollection.find().toArray();
        res.send(result);
      })
    );
    app.patch(
      "/item/:id",
      asyncHandler(async (req, res) => {
        const data = req.body;
        const { id } = req.params;
        if (data?.oldImageUrl) {
          const result = await deleteImageUrl(data.oldImageUrl);
          if (result) {
            delete data.oldImageUrl;
          }
        }
        const result = await coinItemCollection.updateOne(
          { _id: new ObjectId(id) },
          {
            $set: {
              ...data,
            },
          },
          {
            upsert: true,
          }
        );
        res.send(result);
      })
    );

    app.delete(
      "/item/:id",
      asyncHandler(async (req, res) => {
        const { id } = req.params;
        console.log(id);
        const data = await coinItemCollection.findOne({
          _id: new ObjectId(id),
        });
        console.log(data);
        const deleteImage = await deleteImageUrl(data.cover_image);

        if (deleteImage) {
          const result = await coinItemCollection.deleteOne({
            _id: new ObjectId(id),
          });
          res.send(result);
        }
      })
    );

    app.get(
      "/items",
      asyncHandler(async (req, res) => {
        const { category } = req.query;
        const result = await coinItemCollection.find({ category }).toArray();
        res.send(result);
      })
    );
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log(
      "Pinged your deployment. You successfully connected to MongoDB!"
    );
  } finally {
    // Ensures that the client will close when you finish/error
    // await client.close();
  }
}
run().catch(console.dir);

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});
